"""
Repair map files.

This script will not overwrite any live files, it creates
backups, and then writes a "<ID>_repaired" file for each map.

It outputs a list of all the repaired maps that you can then
use to publish them using an as-yet unwritten script...

"""
import sys, os
import json
import re
from xmlrpc.client import boolean
from datetime import datetime

from numpy import fix


# This list is generated by show_map_layers
broken = [
   ("4ab20c018c9141bf84b6b3095472c847", "Survey popup test"),
   ("f42ac39d639d484d9ae0174844adabc8", "Affordable Housing Inventory-Backup Copy"),
   ("ba5d38a16a4841d9a85eec770fa79040", "Clatsop County Public Works Road Map - Web Map"),
   ("8ffcbe43ac8645e383800b1836986189", "Clatsop Housing Development Web Map"),
   ("43c4315eac124fc588d433e37bb18e05", "Redistricting WebMap"),
   ("3d43802eade5432ea5b5650a6c2ae6b4", "Map for the Home Page"),
   ("4decd6e535d64b8797a48052e5091005", "Clatsop Affordable Housing Web Map"),
   ("28adc44a1f4f45489f6592ce4395cbbb", "Clatsop Housing Development Web Map_ARCHIVE"),
   ("c7a1a31d5afd4e9ebd2248c60c92aa3f", "Redistricting WebMap EDIT"),
   ("34d3d5617ff6444da708e22ba39ce94a", "Planning map - county owned properties- EDIT"),
]
broken = [
    ("386a18f13a7f47f3bebd618c223d85cc", "Public Works Facility Map"),
    ("47509878f8a048ec848737ba7e3ec5c6", "Planning map - county owned properties-transit"),
    ("34d3d5617ff6444da708e22ba39ce94a", "Planning map - county owned properties- EDIT"),
    ("e9af4d3d0e1c46db9d49a28737898c6a", " Public Works Road App - Web Map"),
]

# Maps that use the new Empty basemap, make sure they have the right visibility setting.
broken = [
    ("f42ac39d639d484d9ae0174844adabc8", "Affordable Housing Inventory-Backup Copy"),
    ("96f9001036e149eeaa061f89a8a3e399",
     "Clatsop Affordable Housing Web Map_ARCHIVE"),
    ("34d3d5617ff6444da708e22ba39ce94a",
     "Planning map - county owned properties- EDIT"),
    ("28adc44a1f4f45489f6592ce4395cbbb",
     "Clatsop Housing Development Web Map_ARCHIVE"),
    ("43c4315eac124fc588d433e37bb18e05", "Redistricting WebMap"),
    ("6362ae347e8c4d55aa4d41158805aee3", "Test of empty basemap"),
    ("3d43802eade5432ea5b5650a6c2ae6b4", "Map for the Home Page"),
    ("8220470e7d8141ada9917eb31a42c107", "Clatsop County Map Template"),
    ("4ab20c018c9141bf84b6b3095472c847", "Survey popup test"),
    ("ba5d38a16a4841d9a85eec770fa79040",
     "Clatsop County Public Works Road Map - Web Map"),
    ("3858169ab451482c9460d897e05e696c", "A&T map"),
    ("47509878f8a048ec848737ba7e3ec5c6",
     "Planning map - county owned properties-transit"),
    ("386a18f13a7f47f3bebd618c223d85cc", "Public Works Facility Map"),
#    ("bb5debcf14db4c48bbd4c54fc0fc207f", "Planning Map"),
    ("8ffcbe43ac8645e383800b1836986189", "Clatsop Housing Development Web Map"),
    ("4decd6e535d64b8797a48052e5091005", "Clatsop Affordable Housing Web Map"),
    ("f84321f3545643adaadf889ce70dc73e", "Clatsop County Webmaps"),
]
rootdir = "\\\\cc-gis\\C$\\arcgis\\arcgisportal\\content\\items"
template = '8220470e7d8141ada9917eb31a42c107'

# Search for the old text and replace it with the new.
# The hard part is coming up with these expressions and testing them

# In this instance we're replacing the old districts MIL with two new ones,
# "Political boundaries" and "Administrative boundaries", and calling the Admin MIL "Districts" for consistency
# We also want to remove any old precincts and commish services but we do that manually.
districts = (
    "old districts",
    re.compile(r'Admin, Political'),
    ''
)

old_basemap = (
    "old basemap",
    re.compile(r'"baseMap":{"baseMapLayers":\[{"id":"no_basemap_\d+","layerType":"ArcGISTiledMapServiceLayer","url":"https://delta.co.clatsop.or.us/server/rest/services/Hosted/no_basemap/MapServer","visibility":true,"opacity":1,"title":"No basemap","itemId":"b3e80078159a4e54b24512678d96e349"}\],"title":"No basemap"}'),
    '"baseMap":{"baseMapLayers":[{"id":"VectorTile_3458","type":"VectorTileLayer","layerType":"VectorTileLayer","title": "Empty Basemap","styleUrl":"https://delta.co.clatsop.or.us/server/rest/services/Hosted/Empty_Basemap/VectorTileServer/resources/styles/root.json","itemId":"4eeb630bba2d44598f8af15c44621fd7","visibility":true,"opacity":1}],"title":"Basemap"}'
)

# Fixing the visibility range to make the basemap invisible, thus the browser will no longer pull any tiles at all.
viz_range = (
    "basemap visibility",
    re.compile(r'"baseMap":{"baseMapLayers":\[{"id":"VectorTile_3458",'),
    '"baseMap":{"baseMapLayers":[{"id":"VectorTile_3458","minScale":147914382,"maxScale":147914382,'
)

# PLSS

# Roads


fixall = [districts, old_basemap, viz_range]



def minify(s):
    """ Convert json data into a minified version and return it. """
    json_data = json.loads(s)
    if s.count("\n") <= 1: return s
    return json.dumps(json_data, separators=(',', ":"))




s = open(os.path.join(rootdir, template, 'roads.json'), "r").read()
new_json = json.loads(s)

def replacement(title, fn) -> boolean:
    print("Repairing map \"%s\" file \"%s\"" % (title, fn))
    timestamp = datetime.now().strftime("%Y%m%d-%H%M")

    # Read in the existing file
    # 
    #  This relies on having the text for the whole file in one line,
    # so first make sure the file is minimized.
    # Sometimes after editing in VSCODE, I leave them expanded. Tsk Tsk.
    file_data = open(fn, 'r').read()
    try:
        minified_string = minify(file_data)
    except ValueError:
        sys.exit("JSON syntax error!! %s" % fn)
        return None

    # Write a minified backup copy of the original data.
    open('{0}_BACKUP_{1}.json'.format(fn, timestamp), "w", 1).write(minified_string)

    # JSON structure with original data
    json_data = json.loads(file_data)

    # Write a relaxed backup copy, this allows using diff to compare the new file.
    relaxed_string = json.dumps(json_data, indent=4)
    open('{0}_relaxed_{1}.json'.format(fn, timestamp), "w", 1).write(relaxed_string)

#    for d in json_data['operationalLayers']:
#        print('id', d['id'])
#    d[id] = new_json

    # Attempt to do the replacements, that's what this is about, remember?

    repaired = False
    for fix_title, re_old, new in fixall:

        found = re.search(re_old, minified_string)
        if found:
            repaired_string = re.sub(re_old, new, minified_string)
            if repaired_string == minified_string:
                print("WARNING, \"%s\" repair failed." % fix_title)
                continue

            try:
                xmin_data = json.loads(repaired_string)
            except ValueError:
                print("JSON syntax problem with \"%s\"." % fix_title, e)
                continue

            relaxed_string = json.dumps(xmin_data, indent=4)
            open(fn + '_repaired_relaxed.json', "w", 1).write(relaxed_string)

            open(fn + '_repaired', "w", 1).write(repaired_string)
            repaired = True
        else:       
            print("WARNING, old string not found for \"%s\"." % fix_title)

    return repaired


# Iterate over the list of broken maps, 
# repairing each one
# Don't replace the live map file, create a copy called *_repaired.
fixed = list()
for id,title in broken:
    pathname = os.path.join(rootdir,id,id)
    if not os.path.exists(pathname):
        print("Can't find %s" % pathname)
    else:
        status = replacement(title,pathname)
        if status:
            fixed = (id,title)

# Use this list to publish.
print("fixed=[")
for id,title in fixed:
    print("  (\"%s\", \"%s\"), " % (id, title))
print("]")

roads_should_be = 'be645e399add4c4db2bbe36ba754bb30'