# -*- coding: utf-8 -*-
"""
Original generated by ArcGIS ModelBuilder on : 2021-03-02 11:18:31
"""
import os
import arcpy

class GTFSimport(object):

    def __init__(self, workspace=""):
        assert(arcpy.Exists(workspace))
        self.workspace = workspace

        # I believe this is basically an assertion.
        arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Conversion Tools.tbx")
        return

    def do_import(self, sourcedir, agency, overwrite=True):
        """ 
        "overwrite = False" allows me to skip import to test merge
        NOTE: The arcpy workspace must be set correctly for this function's output. 
        """
        
        validated = agency.replace(' ', '_').replace('-', '_').replace('.', '')
        validated = validated.replace('__', '_')

        stops   = os.path.join(sourcedir, agency, "stops.txt")
        routes  = os.path.join(sourcedir, agency, "shapes.txt")
        agency  = os.path.join(sourcedir, agency, "agency.txt")

        stops_fc     = validated + "_stops"
        routes_fc    = validated + "_routes"
        agency_table = validated + "_agency"

        count = 0
        try:
            if os.path.exists(routes):
                if arcpy.Exists(routes_fc) and overwrite:
                    arcpy.conversion.GTFSShapesToFeatures(in_gtfs_shapes_file=routes, 
                        out_feature_class=routes_fc)
                count += 1

            if os.path.exists(stops):
                if arcpy.Exists(stops_fc) and overwrite:
                    arcpy.conversion.GTFSStopsToFeatures(in_gtfs_stops_file=stops, 
                        out_feature_class=stops_fc)
                count += 1

            if os.path.exists(agency):
                if arcpy.Exists(agency_table) and overwrite:
                    arcpy.conversion.TableToTable(agency, self.workspace, agency_table)
                count += 1

        except Exception as e:
            print("   Conversion failed for \"%s\", %s" % (agency, e))
            return None

        if count == 0:
            print("   No data found here.") 
            return None

        try:
            if arcpy.Exists(stops_fc):
                arcpy.AlterAliasName(stops_fc, agency + ' stops')
        except Exception as e:
            print("  Warning: setting alias failed for \"%s\", %s" % (stops_fc, e))

        try:
            if arcpy.Exists(routes_fc):
                arcpy.AlterAliasName(routes_fc, agency + ' routes')
        except Exception as e:
            print("  Warning: setting alias failed for \"%s\", %s" % (routes_fc, e))

        routes_layer = routes_fc + '_lyr'
        stops_layer  = stops_fc + '_lyr'
        arcpy.MakeFeatureLayer_management(routes_fc, routes_layer)
        arcpy.MakeFeatureLayer_management(stops_fc, stops_layer)

        return (routes_layer, stops_layer, agency_table)

if __name__ == '__main__':

    from config import Config

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True # I don't believe this is used anywhere.
    cwd = os.getcwd()
    workspace = os.path.join(cwd, "test_workspace.gdb")
    if not arcpy.Exists(workspace):
        arcpy.CreateFileGDB_management(out_folder_path=".", out_name=workspace)
    arcpy.env.workspace = workspace

    from GTFSdownloader import GTFSdownloader
    table = GTFSdownloader.get_table(Config.site)

    # For unit testing, I just want to process the local data!
    aoi = [
        "Benton Area Transit", 
        "Sunset Empire Transportation District - The Bus",
        "NorthWest POINT",
        "Lincoln County Transit"
    ]

    gtfs = GTFSimport(workspace)
    all_routes = []
    all_stops = []
    all_agencies = []
    routes_fm = arcpy.FieldMappings()
    stops_fm = arcpy.FieldMappings()
    agencies_fm = arcpy.FieldMappings()

    for item in table:
        agency = item['Transit service']
        if agency in aoi:
            print("IMPORTING \"%s\"..." % agency)
            fc = gtfs.do_import(Config.sourcedir, agency, overwrite=False)

            all_routes.append(fc[0])
            all_stops.append(fc[1])
            all_agencies.append(fc[2])

            routes_fm.addTable(fc[0])
            stops_fm.addTable(fc[1])
            agencies_fm.addTable(fc[2])

            pass
        # else:
        #    ignore this one

    print("Merging everything")

    routes_fc    = "Clatsop_Routes"
    stops_fc     = "Clatsop_Stops"
    agency_table = "Clatsop_Agencies"
    arcpy.management.Merge(all_routes, routes_fc, field_mappings=routes_fm, add_source='ADD_SOURCE_INFO')
    arcpy.management.Merge(all_stops, stops_fc, field_mappings=stops_fm, add_source='ADD_SOURCE_INFO')
    arcpy.management.Merge(all_agencies, agency_table, field_mappings=agencies_fm, add_source='ADD_SOURCE_INFO')
    # I regard this as a bug in the conversion process:
    # the feature class agency_id is a TEXT filed
    # the table agency_id is a LONG!!
    # Join the agency table to the feature class
    if arcpy.Exists(routes_fc) and arcpy.Exists(agency_table):
        try:
            arcpy.management.CalculateField(in_table=agency_table, field="agency_id_1", 
                expression="str(!agency_id!)", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]
            arcpy.management.JoinField(in_data=routes_fc, in_field="agency_id", 
                join_table=agency_table, join_field="agency_id_1", 
                fields=[])[0]
        except Exception as e:
            print("Join failed, %s" % e)

    print("All done.")